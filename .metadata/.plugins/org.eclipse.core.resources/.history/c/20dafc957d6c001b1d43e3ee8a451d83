#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <windows.h>
#include <math.h>
#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <vector>
#include <ctime>
#include <chrono>



/* GLUT callback Handlers */
/*
static void resize(int width, int height)
{
    const float ar = (float) width / (float) height;

    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glFrustum(-ar, ar, -1.0, 1.0, 2.0, 100.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity() ;

}
*/

void displayText( float x, float y, int r, int g, int b, const char *string ) {
    int j = strlen( string );

    glColor3f( r, g, b );
    glRasterPos2f( x, y );
    for( int i = 0; i < j; i++ ) {
        glutBitmapCharacter( GLUT_BITMAP_HELVETICA_12, string[i] );
    }
}


static void display(void)
{
	glutUseLayer(GLUT_NORMAL);

    glutUseLayer(GLUT_OVERLAY);

    glPopMatrix();
    glutSwapBuffers();


}


static void key(unsigned char key, int x, int y)
{
    switch (key)
    {
    case '+':
    	if (DISPLAY_WIDTH >=2){
    	    DISPLAY_WIDTH--;
    	}
        /*SolSys.Satellite.at(0).setVelocity(SolSys.Satellite.at(0).getVelocityX()*1.1,SolSys.Satellite.at(0).getVelocityY()*1.1);
        SolSys.Satellite.at(1).setVelocity(SolSys.Satellite.at(1).getVelocityX()*1.1,SolSys.Satellite.at(1).getVelocityY()*1.1);*/
        break;

    case '-':
    	if (DISPLAY_WIDTH <32){
            DISPLAY_WIDTH++;
        }
        /*SolSys.Satellite.at(0).setVelocity(SolSys.Satellite.at(0).getVelocityX()/1.1,SolSys.Satellite.at(0).getVelocityY()/1.1);
        SolSys.Satellite.at(1).setVelocity(SolSys.Satellite.at(1).getVelocityX()/1.1,SolSys.Satellite.at(1).getVelocityY()/1.1);*/
        break;
        case 27 :
        case 'q':
            exit(0);
            break;
        case 'w':
        	centerY += 1.0;
            //SolSys.Central.setPosition(SolSys.Central.getPositionX(),SolSys.Central.getPositionY()+10000000);
            break;
        case 's':
        	centerY -= 1.0;
            //SolSys.Central.setPosition(SolSys.Central.getPositionX(),SolSys.Central.getPositionY()-10000000);
            break;
        case 'a':
        	centerX -= 1.0;
            //SolSys.Central.setPosition(SolSys.Central.getPositionX()-10000000,SolSys.Central.getPositionY());
            break;
        case 'd':
        	centerX += 1.0;
            //SolSys.Central.setPosition(SolSys.Central.getPositionX()+10000000,SolSys.Central.getPositionY());
            break;
    }

    glutPostRedisplay();
}

void SpecialInput(int key, int x, int y)
{
switch(key)
{
break;
case GLUT_KEY_LEFT:
	planetDisplay = (planetDisplay+7)%8;
break;
case GLUT_KEY_RIGHT:
	planetDisplay = (planetDisplay+1)%8;
break;
}
}

static void idle(void)
{
    glutPostRedisplay();
}
/*
const GLfloat light_ambient[]  = { 0.0f, 0.0f, 0.0f, 1.0f };
const GLfloat light_diffuse[]  = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_position[] = { 2.0f, 5.0f, 5.0f, 0.0f };

const GLfloat mat_ambient[]    = { 0.7f, 0.7f, 0.7f, 1.0f };
const GLfloat mat_diffuse[]    = { 0.8f, 0.8f, 0.8f, 1.0f };
const GLfloat mat_specular[]   = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat high_shininess[] = { 100.0f };
*/
/* Program entry point */

int main(int argc, char *argv[])
{

	SolSys = SolarSys("Sol Simulation");
	SolSys.setCentralBody(Planet(0.0, 0.0, 3.3295e5, 0.0, 0.0, "Sol", Planet::WHITE));
    SolSys.addSatellite(Planet(.387, 0.0, 5.52729e-2, 0.0, 0.0276, "Mercury", Planet::GREY));
    SolSys.addSatellite(Planet(.723332, 0.0, .815, 0.0, 2.02257e-2, "Venus", Planet::BEIGE));
    SolSys.addSatellite(Planet(1., 0.0, 1., 0.0, 0.017199, "Earth", Planet::BLUE));
    SolSys.addSatellite(Planet(1.52368, 0.0, .107446, 0.0, 0.0138652, "Mars", Planet::RED));
    SolSys.addSatellite(Planet(5.2044, 0.0, 317.83, 0.0, 0.00754856, "Jupiter", Planet::BROWN));
    SolSys.addSatellite(Planet(9.5826, 0.0, 95.1616, 0.0, 0.00559067, "Saturn", Planet::YELLOW));
    SolSys.addSatellite(Planet(19.184, 0.0, 14.5353, 0.0, 0.00392733, "Uranus", Planet::SKY));
    SolSys.addSatellite(Planet(30.33, 0.0, 17.1456, 0.0, 0.0031361, "Neptune", Planet::PURPLE));
    //high_resolution_clock::time_point t0 = high_resolution_clock::now();
    for (int i = 0; i < SolSys.Satellite.size(); i++){
    	side[i]=true;
    }


    glutInit(&argc, argv);
    glutInitWindowSize(1400,1400);

    //glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);

    glutCreateWindow("Solar System");
    glutEstablishOverlay();

    //glutReshapeFunc(resize);
    glutDisplayFunc(display);
    glutKeyboardFunc(key);
    glutSpecialFunc(SpecialInput);
    glutIdleFunc(idle);
/*
    glClearColor(1,1,1,1);
    glEnable(GL_CULL_FACE);
    glCullFace(GL_BACK);

    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);

    glEnable(GL_LIGHT0);
    glEnable(GL_NORMALIZE);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHTING);

    glLightfv(GL_LIGHT0, GL_AMBIENT,  light_ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE,  light_diffuse);
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);

    glMaterialfv(GL_FRONT, GL_AMBIENT,   mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE,   mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR,  mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
*/
    glutMainLoop();

    return EXIT_SUCCESS;
}
