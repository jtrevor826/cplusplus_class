//============================================================================
// Name        : MyProject.cpp
// Author      : Trevor
// Version     :
// Copyright   :
// Description : Good description
//============================================================================

/*
 * GLUT Shapes Demo
 *
 * Written by Nigel Stewart November 2003
 *
 * This program is test harness for the sphere, cone
 * and torus shapes in GLUT.
 *
 * Spinning wireframe and smooth shaded shapes are
 * displayed until the ESC or q key is pressed.  The
 * number of geometry stacks and slices can be adjusted
 * using the + and - keys.
 */

#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <windows.h>
#include <math.h>
#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <vector>
#include <ctime>
#include <chrono>
#include "Planet.hpp"
#include "SolarSys.hpp"

struct Position{
    double x;
    double y;
};
struct Color{
	float r;
	float g;
	float b;
};
struct Color colors[8];
bool side[8];
SolarSys  SolSys;
double sunRadius =6.9634e8; //radius in meters
Planet mercury,
       venus,
	   earth,
	   mars,
	   jupiter,
	   saturn,
	   uranus,
	   neptune;
double LIMIT =75e10;
double const PI=3.14159265358979;
double delta;
double centerX = 0;
double centerY = 0;
struct Position pointsSun[20];


/* GLUT callback Handlers */
/*
static void resize(int width, int height)
{
    const float ar = (float) width / (float) height;

    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glFrustum(-ar, ar, -1.0, 1.0, 2.0, 100.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity() ;

}
*/

void displayText( float x, float y, int r, int g, int b, const char *string ) {
    int j = strlen( string );

    glColor3f( r, g, b );
    glRasterPos2f( x, y );
    for( int i = 0; i < j; i++ ) {
        glutBitmapCharacter( GLUT_BITMAP_HELVETICA_12, string[i] );
    }
}


static void display(void)
{
	glutUseLayer(GLUT_NORMAL);
    Position grid[20];
    double deltaAngle = PI/10;

    for(int i =0; i < 20; i++){
        pointsSun[i].x= (SolSys.Central.getPositionX()+cos(i*deltaAngle)*sunRadius)/LIMIT;
        pointsSun[i].y= (SolSys.Central.getPositionY()+sin(i*deltaAngle)*sunRadius)/LIMIT;
    }

    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glPushMatrix();

    double delta = PI/10.0;
    for(int r=0; r<20; r++){
        grid[r].x= cos(r*delta)*1000000./LIMIT;
        grid[r].y= sin(r*delta)*1000000./LIMIT;
    }
    //grid
    glPointSize(0.05f);
    glColor3f(0.2f, 0.2f,0.2f);
    glBegin(GL_LINES);
        glVertex2f(-1.0f,0.f);
        glVertex2f(1.0f,0.f);
    glEnd();

    glBegin(GL_LINES);
        glVertex2f(0.f,-1.0f);
        glVertex2f(0.f,1.0f);
    glEnd();

    for(int t=5; t<40; t+=5){
        glBegin(GL_LINE_LOOP);
        for(int i =0; i <20; i++){
            glVertex2f(grid[i].x*t, grid[i].y*t);
        }
        glEnd();
    }

    glColor3f(1.0f,1.f,0.f);
    //central planet plot
    glPointSize(0.50f);
    glBegin(GL_POLYGON);
    for (int i =0; i<20; i++){
        glVertex2f(pointsSun[i].x-centerX/LIMIT, pointsSun[i].y-centerY/LIMIT);
    }
    glEnd();
/*
    glColor3f(0.8f, 0.0f, 0.0f);
    glBegin(GL_LINE_LOOP);
    for (int i =0; i<20; i++){
        glVertex2f(pointsSun[i].x, pointsSun[i].y);
    }
    glEnd();
*/
    //satellite plots
    for (int i = 0; i < SolSys.Satellite.size(); i++){
        SolSys.Satellite.at(i).addPoint();
        glPointSize(.2f);
        for(int j=0; j <SolSys.Satellite.at(i).getValid(); j++){
        glBegin(GL_POINTS);
            glColor3f(colors[i].r, colors[i].g, colors[i].b);
            glVertex2f(((float)SolSys.Satellite.at(i).getPoint(j).x-centerX)/LIMIT, ((float)SolSys.Satellite.at(i).getPoint(j).y-centerY)/LIMIT );
        glEnd();
        }
        glPointSize(2.f);
        glBegin(GL_POINTS);
            glColor3f(1.0f, 1.0f, 1.0f);
            glVertex2f(((float)SolSys.Satellite.at(i).getPositionX()-centerX)/LIMIT, ((float)SolSys.Satellite.at(i).getPositionY()-centerY)/LIMIT );
        glEnd();
    }

    glutUseLayer(GLUT_OVERLAY);

    glBegin(GL_LINE_LOOP);
    glColor3f(1.f,1.f,1.f);
    glVertex2f(0.95f,0.95f);
    glVertex2f(0.95f,0.55f);
    glVertex2f(0.65f,0.55f);
    glVertex2f(0.65f,0.95f);
    glEnd();

    int planetDisplay = 0;
    // for (int i = 1; i < SolSys.Satellite.size(); i++){
    //	if ((SolSys.Satellite.at(i).getPositionX()-centerX)/LIMIT < 0.95 && (SolSys.Satellite.at(i).getPositionX()-centerX)/LIMIT > 0.65 && (SolSys.Satellite.at(i).getPositionY()-centerY)/LIMIT < 0.95 && (SolSys.Satellite.at(i).getPositionY()-centerY)/LIMIT > 0.55){
    //    	if ( i < planetDisplay ) {
    //            planetDisplay = i;
    //    	}
    //	}
    //}

   // if ( planetDisplay != NULL){
        char buffer[100];
        string name = SolSys.Satellite.at(planetDisplay).getName();
        sprintf (buffer, "%s \n", name.c_str());
        //sprintf(buffer, "%s", SolSys.Satellite.at(planetDisplay).getName());
        displayText(0.66f, 0.9f, 1, 1, 1, buffer);
        sprintf(buffer, "Mass: %g", SolSys.Satellite.at(planetDisplay).getMass());
        displayText(0.66f, 0.85f, 1, 1, 1, buffer);
        sprintf(buffer, "Position: (%g,%g%6.4)", SolSys.Satellite.at(planetDisplay).getPositionX(), SolSys.Satellite.at(planetDisplay).getPositionY());
        displayText(0.66f, 0.8f, 1, 1, 1, buffer);
        sprintf(buffer, "Velocity: (%g,%g)", SolSys.Satellite.at(planetDisplay).getVelocityX(), SolSys.Satellite.at(planetDisplay).getVelocityY());
        displayText(0.66f, 0.75f, 1, 1, 1, buffer);
    //}

    glPopMatrix();
    glutSwapBuffers();
    SolSys.updatePosition();
    /*for (int i = 0; i < SolSys.Satellite.size(); i++){
    	if (side[i] == false && SolSys.Satellite.at(i).getPositionX() >= 0){
    		SolSys.Satellite.at(i).reset();
    	}
    	side[i] = (SolSys.Satellite.at(i).getPositionX() >= 0);
    }*/

}


static void key(unsigned char key, int x, int y)
{
    switch (key)
    {
    case '+':
    	LIMIT /= 10;
        /*SolSys.Satellite.at(0).setVelocity(SolSys.Satellite.at(0).getVelocityX()*1.1,SolSys.Satellite.at(0).getVelocityY()*1.1);
        SolSys.Satellite.at(1).setVelocity(SolSys.Satellite.at(1).getVelocityX()*1.1,SolSys.Satellite.at(1).getVelocityY()*1.1);*/
        break;

    case '-':
    	LIMIT *= 10;
        /*SolSys.Satellite.at(0).setVelocity(SolSys.Satellite.at(0).getVelocityX()/1.1,SolSys.Satellite.at(0).getVelocityY()/1.1);
        SolSys.Satellite.at(1).setVelocity(SolSys.Satellite.at(1).getVelocityX()/1.1,SolSys.Satellite.at(1).getVelocityY()/1.1);*/
        break;
        case 'c':
        case 'C':

            break;
        case 27 :
        case 'q':
            exit(0);
            break;
        case 'w':
        	centerY += LIMIT/75;
            //SolSys.Central.setPosition(SolSys.Central.getPositionX(),SolSys.Central.getPositionY()+10000000);
            break;
        case 's':
        	centerY -= LIMIT/75;
            //SolSys.Central.setPosition(SolSys.Central.getPositionX(),SolSys.Central.getPositionY()-10000000);
            break;
        case 'a':
        	centerX -= LIMIT/75;
            //SolSys.Central.setPosition(SolSys.Central.getPositionX()-10000000,SolSys.Central.getPositionY());
            break;
        case 'd':
        	centerX += LIMIT/75;
            //SolSys.Central.setPosition(SolSys.Central.getPositionX()+10000000,SolSys.Central.getPositionY());
            break;
    }

    glutPostRedisplay();
}

static void idle(void)
{
    glutPostRedisplay();
}
/*
const GLfloat light_ambient[]  = { 0.0f, 0.0f, 0.0f, 1.0f };
const GLfloat light_diffuse[]  = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_position[] = { 2.0f, 5.0f, 5.0f, 0.0f };

const GLfloat mat_ambient[]    = { 0.7f, 0.7f, 0.7f, 1.0f };
const GLfloat mat_diffuse[]    = { 0.8f, 0.8f, 0.8f, 1.0f };
const GLfloat mat_specular[]   = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat high_shininess[] = { 100.0f };
*/
/* Program entry point */

int main(int argc, char *argv[])
{

	SolSys = SolarSys("Solar System");
	Planet cb = Planet(0.0,0.0,1.989e30,0.0,0.0,"Sun",1);
    mercury = Planet(0.0, 5.8e10 ,3.285e23,48000.0,0.0,"Mercury",120);
	venus = Planet(0.0,1.082e11,4.867E24,35000.0,0.0,"Venus",500/*600*/);
	earth = Planet(0.0,1.496e11,2.5E15,29780.0,0.0,"Earth",500/*1200*/);
	mars = Planet(0.0,2.28e11,6.39e23,24070.0,0.0,"Mars",500/*1800*/);
	jupiter = Planet(0.0,7.89e11,1.8982e27,13070.0,0.0,"Jupiter",500/*1800*/);
	saturn = Planet(0.0,1.4294e12,1.8982e27,9680.0,0.0,"Saturn",500/*1800*/);
	uranus = Planet(0.0,2.8696e12,8.6810e25,6800.0,0.0,"Uranus",500/*1800*/);
	neptune = Planet(0.0,4.4937e12,1.02413e26,5430.0,0.0,"Neptune",500/*1800*/);
	SolSys.setCentralBody(cb);
    SolSys.addSatellite(mercury);
    SolSys.addSatellite(venus);
    SolSys.addSatellite(earth);
    SolSys.addSatellite(mars);
    SolSys.addSatellite(jupiter);
    SolSys.addSatellite(saturn);
    SolSys.addSatellite(uranus);
    SolSys.addSatellite(neptune);
    SolSys.setInterval(10000);
    //high_resolution_clock::time_point t0 = high_resolution_clock::now();
    colors[0].r=0.75f;
    colors[0].g=0.75f;
    colors[0].b=0.75f;
    colors[1].r=1.0f;
    colors[1].g=0.5f;
    colors[1].b=0.0f;
    colors[2].r=0.0f;
    colors[2].g=0.0f;
    colors[2].b=1.0f;
    colors[3].r=1.0f;
    colors[3].g=0.0f;
    colors[3].b=0.0f;
    colors[4].r=0.5f;
    colors[4].g=0.25f;
    colors[4].b=0.0f;
    colors[5].r=1.0f;
    colors[5].g=0.75f;
    colors[5].b=0.0f;
    colors[6].r=0.0f;
    colors[6].g=0.75f;
    colors[6].b=1.0f;
    colors[7].r=0.2;
    colors[7].g=0.2;
    colors[7].b=0.8;
    for (int i = 0; i < SolSys.Satellite.size(); i++){
    	side[i]=true;
    }


    glutInit(&argc, argv);
    glutInitWindowSize(1400,1400);

    //glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);

    glutCreateWindow("Solar System");
    glutEstablishOverlay();

    //glutReshapeFunc(resize);
    glutDisplayFunc(display);
    glutKeyboardFunc(key);
    glutIdleFunc(idle);
/*
    glClearColor(1,1,1,1);
    glEnable(GL_CULL_FACE);
    glCullFace(GL_BACK);

    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);

    glEnable(GL_LIGHT0);
    glEnable(GL_NORMALIZE);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHTING);

    glLightfv(GL_LIGHT0, GL_AMBIENT,  light_ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE,  light_diffuse);
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);

    glMaterialfv(GL_FRONT, GL_AMBIENT,   mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE,   mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR,  mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);
*/
    delta = 600.0/LIMIT;
    glutMainLoop();

    return EXIT_SUCCESS;
}
